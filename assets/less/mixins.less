.colored-link (@color-name, @color) {
  &.@{color-name} {
    color: @color;

    &:after {
      border-bottom-color: @color;
    }

    &:hover {
      border-bottom-color: @color + 25;

      &:after {
        border-bottom-color: @color + 25;
      }
    }
  }
}

.text-shadow (@string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
  text-shadow: @string;
}

.box-shadow (@shadow) {
  -webkit-box-shadow: @shadow;
  -moz-box-shadow:    @shadow;
  box-shadow:         @shadow;
}

.box-shadow-multi (@shadow, ...) {
  @props: ~`"@{arguments}".replace(/[\[\]]/g, '')`;

  -webkit-box-shadow: @props;
  -moz-box-shadow:    @props;
  box-shadow:         @props;
}

.box-sizing (@type: border-box) {
  -webkit-box-sizing: @type;
  -moz-box-sizing:    @type;
  box-sizing:         @type;
}

.border-radius (@radius: @base-border-radius) {
  -webkit-border-radius: @radius;
  -moz-border-radius:    @radius;
  border-radius:         @radius;

  -moz-background-clip:    padding;
  -webkit-background-clip: padding-box;
  background-clip:         padding-box;
}

.opacity (@opacity: 0.5) {
  -webkit-opacity: 	@opacity;
  -moz-opacity: 		@opacity;
  opacity: 		@opacity;
}

.gradient-vertical (@startColor: #eee, @endColor: white) {
  background-color: @startColor;
  background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
  background: -webkit-linear-gradient(top, @startColor, @endColor);
  background: -moz-linear-gradient(top, @startColor, @endColor);
  background: -ms-linear-gradient(top, @startColor, @endColor);
  background: -o-linear-gradient(top, @startColor, @endColor);
}

.gradient-horizontal (@startColor: #eee, @endColor: white) {
  background-color: @startColor;
  background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
  background-image: -webkit-linear-gradient(left, @startColor, @endColor);
  background-image: -moz-linear-gradient(left, @startColor, @endColor);
  background-image: -ms-linear-gradient(left, @startColor, @endColor);
  background-image: -o-linear-gradient(left, @startColor, @endColor);
}

.clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.font-face (@family: arial, @url, @weight: normal, @style: normal){
  @font-face{
    font-family: @family;
    src:url('@{url}.eot');
    src:url('@{url}.eot?#iefix') format('embedded-opentype'),
    url('@{url}.woff') format('woff'),
    url('@{url}.ttf') format('truetype'),
    url('@{url}.svg#icon') format('svg');
    font-weight: @weight;
    font-style: @style;
  }
}

.translucent-background (@var-color, @var-alpha) {
  .recursion(@var-color, @var-alpha) when (iscolor(@var-color)) and (isnumber(@var-alpha)) {
    @var-hsla: hsla(hue(@var-color), saturation(@var-color), lightness(@var-color), @var-alpha);
    @var-argb: argb(@var-hsla);
    background-color: @var-hsla;
    /* IE hacks */
    zoom: 1;
    background-color: transparent\9;
    -ms-filter:  "progid:DXImageTransform.Microsoft.gradient(startColorstr=@{var-argb}, endColorstr=@{var-argb})";
    filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr=@{var-argb}, endColorstr=@{var-argb})";
  }
  .recursion(@var-color, @var-alpha);
}

.translucent-color (@var-color, @var-alpha) {
  .recursion(@var-color, @var-alpha) when (iscolor(@var-color)) and (isnumber(@var-alpha)) {
    color: hsla(hue(@var-color), saturation(@var-color), lightness(@var-color), @var-alpha);
  }
  .recursion(@var-color, @var-alpha);
}

.translucent-border-color (@var-color, @var-alpha) {
  .recursion(@var-color, @var-alpha) when (iscolor(@var-color)) and (isnumber(@var-alpha)) {
    border-color: hsla(hue(@var-color), saturation(@var-color), lightness(@var-color), @var-alpha);
    #background > .clip(padding-box);
  }
  .recursion(@var-color, @var-alpha);
}